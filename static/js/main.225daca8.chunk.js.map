{"version":3,"sources":["AppBar.js","tileData.js","ImageGridList.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","props","classes","react_default","a","createElement","className","AppBar_default","position","color","Toolbar_default","Typography_default","variant","href","tileData","img","title","author","cols","theme","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","GridList_default","cellHeight","map","tile","GridListTile_default","key","src","alt","App","id","src_AppBar","role","src_ImageGridList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAsCeA,2BA/BA,CACbC,KAAM,CACJC,SAAU,IA6BCF,CAzBf,SAAsBG,GAAO,IACnBC,EAAYD,EAAZC,QAER,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQH,MACtBI,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,SAAS,QAAQC,MAAM,WAC7BN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,KACED,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAYQ,QAAQ,KAAKH,MAAM,WAC7BN,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,SAAR,SACJV,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,UAAR,UACJV,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,YAAR,YACJV,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,YAAR,qDCSJC,EAlCC,CACb,CACEC,IAAK,kCACLC,MAAO,QACPC,OAAQ,SACRC,KAAM,GAER,CACIH,IAAK,kCACLC,MAAO,QACPC,OAAQ,SACRC,KAAM,GAEV,CACIH,IAAK,kCACLC,MAAO,QACPC,OAAQ,SACRC,KAAM,GAEV,CACIH,IAAK,kCACLC,MAAO,QACPC,OAAQ,SACRC,KAAM,GAEV,CACIH,IAAK,kCACLC,MAAO,QACPC,OAAQ,SACRC,KAAM,ICYCpB,2BAlCA,SAAAqB,GAAK,MAAK,CACvBpB,KAAM,CACJqB,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,SACVC,gBAAiBL,EAAMM,QAAQC,WAAWC,OAE5CC,SAAU,CACRC,MAAO,IACPC,OAAQ,OAwBGhC,CApBf,SAAuBG,GAAO,IACpBC,EAAYD,EAAZC,QAER,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQH,MACtBI,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,CAAU4B,WAAY,IAAK1B,UAAWJ,EAAQ0B,SAAUV,KAAM,GAC3DJ,EAASmB,IAAI,SAAAC,GAAI,OAChB/B,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAD,CAAcgC,IAAKF,EAAKnB,IAAKG,KAAMgB,EAAKhB,MAAQ,GAC9Cf,EAAAC,EAAAC,cAAA,OAAKgC,IAAKH,EAAKnB,IAAKuB,IAAKJ,EAAKlB,eCa3BuB,mLAnCX,OACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKmC,GAAG,QACRrC,EAAAC,EAAAC,cAACoC,EAAD,MACEtC,EAAAC,EAAAC,cAAA,6BAEFF,EAAAC,EAAAC,cAAA,OAAKmC,GAAG,QAAQE,KAAK,QACnBvC,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,OAAKmC,GAAG,OACNrC,EAAAC,EAAAC,cAAA,4MAGAF,EAAAC,EAAAC,cAAA,sHAC4GF,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,2CAAR,QAD5G,+IAGAV,EAAAC,EAAAC,cAAA,8MAGAF,EAAAC,EAAAC,cAAA,uKAKJF,EAAAC,EAAAC,cAAA,OAAKmC,GAAG,WACNrC,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACsC,EAAD,OAEFxC,EAAAC,EAAAC,cAAA,OAAKmC,GAAG,WAAR,mCA7BUI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.225daca8.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n};\r\n\r\nfunction SimpleAppBar(props) {\r\n  const { classes } = props;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\" color=\"default\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n            <ul>\r\n                <li><a href='#home'>Home</a></li>\r\n                <li><a href='#about'>About</a></li>\r\n                <li><a href='#gallery'>Gallery</a></li>\r\n                <li><a href='#contact'>Contact</a></li>\r\n            </ul>\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nSimpleAppBar.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(SimpleAppBar);","const tileData = [\r\n    {\r\n      img: \"https://i.imgur.com/eoB5ZWP.jpg\",\r\n      title: 'Image',\r\n      author: 'author',\r\n      cols: 2,\r\n    },\r\n    {\r\n        img: \"https://i.imgur.com/oce6Bkw.jpg\",\r\n        title: 'image',\r\n        author: 'author',\r\n        cols: 1,\r\n    },\r\n    {\r\n        img: \"https://i.imgur.com/0AH3at3.jpg\",\r\n        title: 'image',\r\n        author: 'author',\r\n        cols: 1,\r\n    },\r\n    {\r\n        img: \"https://i.imgur.com/Vbe4bEt.jpg\",\r\n        title: 'image',\r\n        author: 'author',\r\n        cols: 2,\r\n    },\r\n    {\r\n        img: \"https://i.imgur.com/y3ON87d.jpg\",\r\n        title: 'image',\r\n        author: 'author',\r\n        cols: 3,\r\n    },\r\n ];\r\n\r\n\r\n export default tileData;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport tileData from './tileData';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    width: 900,\r\n    height: 900,\r\n  },\r\n});\r\n\r\nfunction ImageGridList(props) {\r\n  const { classes } = props;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <GridList cellHeight={450} className={classes.gridList} cols={3}>\r\n        {tileData.map(tile => (\r\n          <GridListTile key={tile.img} cols={tile.cols || 1}>\r\n            <img src={tile.img} alt={tile.title} />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  );\r\n}\r\n\r\nImageGridList.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(ImageGridList);","import React, { Component } from 'react';\nimport './App.css';\nimport AppBar from './AppBar.js'\nimport ImageGridList from './ImageGridList.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"home\">\n        <AppBar/>\n          <h1>River Rat Raku</h1>\n        </div>\n        <div id=\"about\" role=\"main\">\n          <h1>Father, Husband, Potter</h1>\n          <div id=\"bio\">\n            <p>\n              Jeffrey Lowrance currently works out of his studio in New Braunfels, Texas. He has a passion for designing unique and interesting pieces and loves to share his talent with family and friends.\n            </p>\n            <p>\n              Jeff has over four decades of experience working with ceramics. Much of his more recent work has explored <a href=\"https://en.wikipedia.org/wiki/Raku_ware\">Raku</a> pottery. Originally a Japanese method, Western Raku became popular in the 1950s and quickly developed into a unique and distinctive style.\n            </p>\n            <p>\n              Raku involves the use of various waxes and glazes. Horse hair is often used to create fine lines and textures that give each piece a distinct look. You can see these styles in Jeffâ€™s work.\n            </p>\n            <p>\n              Please take a look at our the gallery and if you are interested in purchasing any of Jeff's pieces, use the contact form below to get in touch with him.\n            </p>\n        </div>\n        </div>\n        <div id=\"gallery\">\n          <h1>Gallery</h1>\n          <ImageGridList/>\n        </div>\n        <div id=\"contact\">\n          alskdjfl;aksdjfl;akjsdf\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}